spring:
    application:
        name: springboot-angular
    banner:
        location: classpath:banner.txt
    security:
        oauth2:
            client:
                registration:
                    google:
                        client-id: ${GOOGLECLIENTID}
                        client-secret: ${GOOGLECLIENTSECRET}
                        redirectUri: '{baseUrl}/api/oauth2/callback/{registrationId}'
                        scope: 'email, profile'
                    microsoft:
                        client-id: ${MICROSOFTCLIENTID}
                        client-secret: ${MICROSOFTCLIENTSECRET}
                        scope: openid, email, profile, api://d2307635-995a-4cee-99ca-a7de762f1d3f/WebAccess
                        client-name: Microsoft
                        authorization-grant-type: authorization_code
                        provider: microsoft
                        redirect-uri: '{baseUrl}/api/oauth2/callback/{registrationId}'
                provider:
                    microsoft:
                        authorization-uri: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
                        key-set-uri: https://login.microsoftonline.com/common/discovery/v2.0/keys
                        token-uri: https://login.microsoftonline.com/common/oauth2/v2.0/token
                        user-info-uri: https://graph.microsoft.com/oidc/userinfo
                        userNameAttribute: sub
                        issuer-uri: https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0
    kafka:
#        ssl:
#            key-store-location: classpath:server-keystore.jks
#            key-store-password: password
#            key-password: password
#            trust-store-location: classpath:server-truststore.jks
#            trust-stor-password: password
        properties:
#            security:
#                protocol: SSL
            auto:
                register:
                    schemas: true
        bootstrap-servers: http://host.docker.internal:29092   
        producer:
            acks: all
            retries: 50
            properties:
                retry:
                    backoff:
                        ms: 250
                schema:
                    registry:
                        url: http://host.docker.internal:8081
 #                       ssl:
 #                           keystore:
 #                               location: /var/kafka-demo-app/conf/server-keystore.jks
 #                               password: password
 #                               type: JKS
 #                           key:
 #                               password: password
 #                           truststore:
 #                               location: /var/kafka-demo-app/conf/server-truststore.jks  
 #                               password: password  
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
server:
    port: 8090
#  ssl:
#    key-store-type: PKCS12
#    key-store: "classpath:keystore/devcert.pfx"
#    key-store-password: "mycertpassword"
#    enabled: true  
logging:
    level: 
        root: INFO
app: 
    kafka-topic: weborders
    auth:
        tokenSecret: ${AUTH_TOKEN_SECRET}
        tokenExpirationMsec: 864000000
    oauth2:
        authorizedRedirectUris: http://localhost:4200

