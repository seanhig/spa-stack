/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.idstudios.flink.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5096409343690043127L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebOrder\",\"namespace\":\"io.idstudios.flink.models\",\"fields\":[{\"name\":\"web_order_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"order_date\",\"type\":\"long\"},{\"name\":\"customer_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"destination\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"product_id\",\"type\":\"int\"},{\"name\":\"quantity\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebOrder> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebOrder> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String web_order_id;
  private long order_date;
  private java.lang.String customer_name;
  private java.lang.String destination;
  private int product_id;
  private int quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebOrder() {}

  /**
   * All-args constructor.
   * @param web_order_id The new value for web_order_id
   * @param order_date The new value for order_date
   * @param customer_name The new value for customer_name
   * @param destination The new value for destination
   * @param product_id The new value for product_id
   * @param quantity The new value for quantity
   */
  public WebOrder(java.lang.String web_order_id, java.lang.Long order_date, java.lang.String customer_name, java.lang.String destination, java.lang.Integer product_id, java.lang.Integer quantity) {
    this.web_order_id = web_order_id;
    this.order_date = order_date;
    this.customer_name = customer_name;
    this.destination = destination;
    this.product_id = product_id;
    this.quantity = quantity;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return web_order_id;
    case 1: return order_date;
    case 2: return customer_name;
    case 3: return destination;
    case 4: return product_id;
    case 5: return quantity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: web_order_id = value$ != null ? value$.toString() : null; break;
    case 1: order_date = (java.lang.Long)value$; break;
    case 2: customer_name = value$ != null ? value$.toString() : null; break;
    case 3: destination = value$ != null ? value$.toString() : null; break;
    case 4: product_id = (java.lang.Integer)value$; break;
    case 5: quantity = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'web_order_id' field.
   * @return The value of the 'web_order_id' field.
   */
  public java.lang.String getWebOrderId() {
    return web_order_id;
  }


  /**
   * Sets the value of the 'web_order_id' field.
   * @param value the value to set.
   */
  public void setWebOrderId(java.lang.String value) {
    this.web_order_id = value;
  }

  /**
   * Gets the value of the 'order_date' field.
   * @return The value of the 'order_date' field.
   */
  public long getOrderDate() {
    return order_date;
  }


  /**
   * Sets the value of the 'order_date' field.
   * @param value the value to set.
   */
  public void setOrderDate(long value) {
    this.order_date = value;
  }

  /**
   * Gets the value of the 'customer_name' field.
   * @return The value of the 'customer_name' field.
   */
  public java.lang.String getCustomerName() {
    return customer_name;
  }


  /**
   * Sets the value of the 'customer_name' field.
   * @param value the value to set.
   */
  public void setCustomerName(java.lang.String value) {
    this.customer_name = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.lang.String getDestination() {
    return destination;
  }


  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(java.lang.String value) {
    this.destination = value;
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return The value of the 'product_id' field.
   */
  public int getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * @param value the value to set.
   */
  public void setProductId(int value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Creates a new WebOrder RecordBuilder.
   * @return A new WebOrder RecordBuilder
   */
  public static io.idstudios.flink.models.WebOrder.Builder newBuilder() {
    return new io.idstudios.flink.models.WebOrder.Builder();
  }

  /**
   * Creates a new WebOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebOrder RecordBuilder
   */
  public static io.idstudios.flink.models.WebOrder.Builder newBuilder(io.idstudios.flink.models.WebOrder.Builder other) {
    if (other == null) {
      return new io.idstudios.flink.models.WebOrder.Builder();
    } else {
      return new io.idstudios.flink.models.WebOrder.Builder(other);
    }
  }

  /**
   * Creates a new WebOrder RecordBuilder by copying an existing WebOrder instance.
   * @param other The existing instance to copy.
   * @return A new WebOrder RecordBuilder
   */
  public static io.idstudios.flink.models.WebOrder.Builder newBuilder(io.idstudios.flink.models.WebOrder other) {
    if (other == null) {
      return new io.idstudios.flink.models.WebOrder.Builder();
    } else {
      return new io.idstudios.flink.models.WebOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebOrder instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebOrder>
    implements org.apache.avro.data.RecordBuilder<WebOrder> {

    private java.lang.String web_order_id;
    private long order_date;
    private java.lang.String customer_name;
    private java.lang.String destination;
    private int product_id;
    private int quantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.idstudios.flink.models.WebOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.web_order_id)) {
        this.web_order_id = data().deepCopy(fields()[0].schema(), other.web_order_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.order_date)) {
        this.order_date = data().deepCopy(fields()[1].schema(), other.order_date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[2].schema(), other.customer_name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.product_id)) {
        this.product_id = data().deepCopy(fields()[4].schema(), other.product_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing WebOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(io.idstudios.flink.models.WebOrder other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.web_order_id)) {
        this.web_order_id = data().deepCopy(fields()[0].schema(), other.web_order_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order_date)) {
        this.order_date = data().deepCopy(fields()[1].schema(), other.order_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[2].schema(), other.customer_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.product_id)) {
        this.product_id = data().deepCopy(fields()[4].schema(), other.product_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'web_order_id' field.
      * @return The value.
      */
    public java.lang.String getWebOrderId() {
      return web_order_id;
    }


    /**
      * Sets the value of the 'web_order_id' field.
      * @param value The value of 'web_order_id'.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder setWebOrderId(java.lang.String value) {
      validate(fields()[0], value);
      this.web_order_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'web_order_id' field has been set.
      * @return True if the 'web_order_id' field has been set, false otherwise.
      */
    public boolean hasWebOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'web_order_id' field.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder clearWebOrderId() {
      web_order_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_date' field.
      * @return The value.
      */
    public long getOrderDate() {
      return order_date;
    }


    /**
      * Sets the value of the 'order_date' field.
      * @param value The value of 'order_date'.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder setOrderDate(long value) {
      validate(fields()[1], value);
      this.order_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'order_date' field has been set.
      * @return True if the 'order_date' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'order_date' field.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder clearOrderDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_name' field.
      * @return The value.
      */
    public java.lang.String getCustomerName() {
      return customer_name;
    }


    /**
      * Sets the value of the 'customer_name' field.
      * @param value The value of 'customer_name'.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder setCustomerName(java.lang.String value) {
      validate(fields()[2], value);
      this.customer_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_name' field has been set.
      * @return True if the 'customer_name' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customer_name' field.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder clearCustomerName() {
      customer_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.lang.String getDestination() {
      return destination;
    }


    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder setDestination(java.lang.String value) {
      validate(fields()[3], value);
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * @return The value.
      */
    public int getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder setProductId(int value) {
      validate(fields()[4], value);
      this.product_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'product_id' field.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder clearProductId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder setQuantity(int value) {
      validate(fields()[5], value);
      this.quantity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public io.idstudios.flink.models.WebOrder.Builder clearQuantity() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebOrder build() {
      try {
        WebOrder record = new WebOrder();
        record.web_order_id = fieldSetFlags()[0] ? this.web_order_id : (java.lang.String) defaultValue(fields()[0]);
        record.order_date = fieldSetFlags()[1] ? this.order_date : (java.lang.Long) defaultValue(fields()[1]);
        record.customer_name = fieldSetFlags()[2] ? this.customer_name : (java.lang.String) defaultValue(fields()[2]);
        record.destination = fieldSetFlags()[3] ? this.destination : (java.lang.String) defaultValue(fields()[3]);
        record.product_id = fieldSetFlags()[4] ? this.product_id : (java.lang.Integer) defaultValue(fields()[4]);
        record.quantity = fieldSetFlags()[5] ? this.quantity : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebOrder>
    READER$ = (org.apache.avro.io.DatumReader<WebOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.web_order_id);

    out.writeLong(this.order_date);

    out.writeString(this.customer_name);

    out.writeString(this.destination);

    out.writeInt(this.product_id);

    out.writeInt(this.quantity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.web_order_id = in.readString();

      this.order_date = in.readLong();

      this.customer_name = in.readString();

      this.destination = in.readString();

      this.product_id = in.readInt();

      this.quantity = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.web_order_id = in.readString();
          break;

        case 1:
          this.order_date = in.readLong();
          break;

        case 2:
          this.customer_name = in.readString();
          break;

        case 3:
          this.destination = in.readString();
          break;

        case 4:
          this.product_id = in.readInt();
          break;

        case 5:
          this.quantity = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










